openapi: '3.0.3'
info:
  title: Argon API
  description: API для работы с сервисом Argon
  version: 1.0.0
servers:
  - url: http://127.0.0.1/api/v1
    description: API версии 1

tags:
  - name: System
    description: Системные операции
  - name: Listing
    description: Операции с объявлениями
  - name: Categories
    description: Операции с категориями
  - name: Search
    description: Поиск объявлений

paths:
  /api/v1/ping:
    get:
      summary: Проверить доступность сервера
      tags:
        - System
      description: Проверяет, доступен ли сервер.
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  ping:
                    type: string
                    example: pong
                required:
                  - ping

  /api/v1/listing:
    post:
      summary: Создать новое объявление
      tags:
        - Listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Часы
                text:
                  type: string
                  example: супер товар
              required:
                - title
                - text
      responses:
        '200':
          description: Объявление успешно создано
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  title:
                    type: string
                    example: Часы
                  text:
                    type: string
                    example: супер товар
                required:
                  - id
                  - title
                  - text

  /api/v1/listing/{listing_id}:
    get:
      summary: Получить объявление по ID
      tags:
        - Listing
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешно найденное объявление
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  title:
                    type: string
                    example: Часы
                  text:
                    type: string
                    example: супер товар
                required:
                  - id
                  - title
                  - text
        '404':
          description: Объект не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: NotFound
                  description:
                    type: string
                    example: Объект не найден

    delete:
      summary: Удалить объявление по ID
      tags:
        - Listing
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Объявление успешно удалено

    put:
      summary: Обновить объявление по ID
      tags:
        - Listing
      parameters:
        - name: listing_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Часы
                text:
                  type: string
                  example: супер товар
              required:
                - title
                - text
      responses:
        '200':
          description: Объявление успешно обновлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  title:
                    type: string
                    example: Часы
                  text:
                    type: string
                    example: супер товар
                required:
                  - id
                  - title
                  - text

  /api/v1/categories:
    get:
      summary: Получить дерево категорий
      tags:
        - Categories
      description: Возвращает иерархию категорий с подкатегориями.
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
            enum: [en, ru]
            default: en
          required: false
          description: Язык ответа (по умолчанию en)
      responses:
        '200':
          description: Успешный ответ с иерархией категорий
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - category
                  properties:
                    category:
                      type: object
                      required:
                        - id
                        - name
                      properties:
                        id:
                          type: string
                          example: "electronics"
                        name:
                          type: string
                          example: "Электроника"
                    subcategories:
                      type: array
                      description: Список подкатегорий, если они существуют
                      items:
                        $ref: '#/components/schemas/CategoryWithSubcategories'
              example:
                - category:
                    id: "electronics"
                    name: "Электроника"
                  subcategories:
                    - category:
                        id: "smartphones"
                        name: "Смартфоны"
                      subcategories:
                        - category:
                            id: "iphone"
                            name: "iPhone"
                        - category:
                            id: "google_pixel"
                            name: "Google Pixel"
                - category:
                    id: "clothing"
                    name: "Одежда"
                  subcategories:
                    - category:
                        id: "mens_clothing"
                        name: "Мужская одежда"
                    - category:
                        id: "womens_clothing"
                        name: "Женская одежда"
                - category:
                    id: "furniture"
                    name: "Мебель"

  /api/v1/search:
    get:
      summary: Поиск объявлений
      tags:
        - Search
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: Поисковый запрос
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Максимальное количество результатов
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Курсор для пагинации
        - name: sort_order
          in: query
          required: true
          schema:
            type: string
            enum: [price_asc, price_desc, relevance_asc, relevance_desc, popularity_asc, popularity_desc]
          description: Порядок сортировки результатов
        - name: search_id
          in: query
          required: false
          schema:
            type: string
          description: данные для пагинации
        - name: category
          in: query
          required: false
          schema:
            type: string
          description: Категория для поиска
      responses:
        '200':
          description: Успешный поиск
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
                  cursor_after:
                    type: string
                    description: Курсор для следующей страницы
                  cursor_before:
                    type: string
                    description: Курсор для предыдущей страницы
                  search_id:
                    type: string
                    description: ID поискового запроса
                required:
                  - results
        '400':
          description: Некорректные параметры запроса

components:
  schemas:
    PingResponse:
      type: object
      properties:
        ping:
          type: string
          example: pong
      required:
        - ping

    ListingRequest:
      type: object
      properties:
        title:
          type: string
          example: Часы
        text:
          type: string
          example: супер товар
      required:
        - title
        - text

    ListingResponse:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: Часы
        text:
          type: string
          example: супер товар
      required:
        - id
        - title
        - text

    Listing:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: Часы
        text:
          type: string
          example: супер товар
      required:
        - id
        - title
        - text

    CategoryWithSubcategories:
      type: object
      required:
        - category
      properties:
        category:
          type: object
          required:
            - id
            - name
          properties:
            id:
              type: string
              example: "smartphones"
            name:
              type: string
              example: "Смартфоны"
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryWithSubcategories'

  responses:
    NotFound:
      description: Объект не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: NotFound
              description:
                type: string
                example: Объект не найден
